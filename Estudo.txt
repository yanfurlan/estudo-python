1. Variáveis e Tipos de Dados
int, float, str, bool

    int (Inteiro): Representa números inteiros, positivos ou negativos, sem parte decimal. Exemplo: 10, -42.
    float (Ponto flutuante): Representa números reais com parte decimal. Exemplo: 3.14, -0.001.
    str (String): Representa uma sequência de caracteres, usada para armazenar texto. Strings são delimitadas por aspas simples ou duplas. Exemplo: 'Python', "Hello, World!".
    bool (Booleano): Representa valores lógicos True ou False. Usado principalmente em operações de controle de fluxo e comparações.

Conversão de tipos (int(), str(), etc.)

    Conversão implícita: Python às vezes converte automaticamente tipos de dados, como ao somar um inteiro e um float.
    Conversão explícita: Usada quando é necessário converter tipos manualmente.
        int(x): Converte x para um inteiro.
        float(x): Converte x para um ponto flutuante.
        str(x): Converte x para uma string.
        bool(x): Converte x para um booleano. Valores como 0, None, '' são convertidos para False.

2. Operadores
Aritméticos (+, -, *, /, %)

    Soma (+): Adiciona dois valores. Exemplo: 5 + 3 = 8.
    Subtração (-): Subtrai um valor de outro. Exemplo: 10 - 4 = 6.
    Multiplicação (*): Multiplica dois valores. Exemplo: 7 * 6 = 42.
    Divisão (/): Divide um valor por outro, retornando um float. Exemplo: 9 / 2 = 4.5.
    Módulo (%): Retorna o resto da divisão de dois números. Exemplo: 10 % 3 = 1.

Comparação (==, !=, >, <)

    Igual a (==): Verifica se dois valores são iguais. Exemplo: 5 == 5 retorna True.
    Diferente de (!=): Verifica se dois valores são diferentes. Exemplo: 5 != 3 retorna True.
    Maior que (>): Verifica se o valor à esquerda é maior que o valor à direita. Exemplo: 7 > 4 retorna True.
    Menor que (<): Verifica se o valor à esquerda é menor que o valor à direita. Exemplo: 3 < 8 retorna True.

Lógicos (and, or, not)

    and: Retorna True se ambas as condições forem verdadeiras. Exemplo: True and False retorna False.
    or: Retorna True se pelo menos uma das condições for verdadeira. Exemplo: True or False retorna True.
    not: Inverte o valor lógico. Exemplo: not True retorna False.

3. Controle de Fluxo
Condicionais (if, elif, else)

    if: Verifica uma condição. Se a condição for verdadeira, executa o bloco de código correspondente.

x = 10
if x > 5:
    print("x é maior que 5")

elif: Verifica uma nova condição se a anterior foi falsa. Pode haver múltiplos elif.
    
x = 10
if x > 10:
    print("x é maior que 10")
elif x == 10:
    print("x é igual a 10")


else: Executa um bloco de código se todas as condições anteriores forem falsas.

x = 10
if x > 10:
    print("x é maior que 10")
else:
    print("x é menor ou igual a 10")


Loops

    for: Itera sobre uma sequência (como uma lista, tupla ou string). Cada iteração acessa um elemento da sequência.

for i in range(5):
    print(i)


while: Executa um bloco de código enquanto uma condição for verdadeira.
    
x = 0
while x < 5:
    print(x)
    x += 1


Funções úteis:

    range(start, stop, step): Gera uma sequência de números. Exemplo: range(0, 10, 2) gera 0, 2, 4, 6, 8.
    break: Interrompe o loop. Exemplo:

for i in range(10):
    if i == 5:
        break
    print(i)


continue: Pula para a próxima iteração do loop. Exemplo:

for i in range(10):
    if i % 2 == 0:
        continue
    print(i)


Compreensão de Listas

    Sintaxe e exemplos:
        Permite criar listas de maneira concisa. Exemplo:

even_numbers = [x for x in range(10) if x % 2 == 0]

A lista even_numbers conterá [0, 2, 4, 6, 8].

4. Estruturas de Dados
Listas

    Criação, indexação, fatiamento:
        Criação: Uma lista é criada usando colchetes []. Exemplo: my_list = [1, 2, 3].
        Indexação: Acessa elementos da lista usando índices, começando em 0. Exemplo: my_list[0] retorna 1.
        Fatiamento ([start:stop:step]): Extrai uma sublista. Exemplo: my_list[1:3] retorna [2, 3].
    Métodos principais:
        append(x): Adiciona x ao final da lista.
        remove(x): Remove a primeira ocorrência de x na lista.
        sort(): Ordena a lista em ordem crescente.

Tuplas

    Imutáveis, uso em retornos de funções:
        Tuplas são como listas, mas imutáveis (não podem ser modificadas). Exemplo: my_tuple = (1, 2, 3).
        Usadas quando você precisa garantir que os dados não serão alterados, como ao retornar múltiplos valores de uma função:

def coordenadas():
    return (10, 20)
x, y = coordenadas()


Dicionários

    Pares chave-valor, métodos:
        Um dicionário é uma coleção de pares chave-valor. Exemplo: my_dict = {'nome': 'Alice', 'idade': 25}.
        Métodos principais:
            keys(): Retorna todas as chaves do dicionário.
            values(): Retorna todos os valores do dicionário.
            items(): Retorna uma lista de tuplas, onde cada tupla contém um par chave-valor.

Conjuntos

    Coleções não ordenadas, operações de conjuntos:
        Um conjunto é uma coleção não ordenada e não indexada de elementos únicos. Exemplo: my_set = {1, 2, 3}.
        Operações principais:
            union(): Retorna a união de dois conjuntos. Exemplo: set1.union(set2).
            intersection(): Retorna a interseção de dois conjuntos. Exemplo: set1.intersection(set2).

5. Funções
Definindo Funções

    def para criar funções, parâmetros e argumentos:
        Funções são definidas usando a palavra-chave def. Exemplo:

def soma(a, b):
    return a + b


Valores padrão e argumentos nomeados:

    Você pode definir valores padrão para os parâmetros:

def saudacao(nome, saudacao="Olá"):
    print(saudacao, nome)


Argumentos podem ser passados por nome:

saudacao(nome="Alice", saudacao="Bom dia")


Funções Lambda

    Pequenas funções anônimas:
        Funções lambda são funções curtas e anônimas, usadas para operações simples. Exemplo:

dobro = lambda x: x * 2
print(dobro(5))

Recursão

    Conceito e exemplo básico:
        Recursão é quando uma função chama a si mesma. Exemplo clássico: cálculo do fatorial de um número:

def fatorial(n):
    if n == 1:
        return 1
    else:
        return n * fatorial(n-1)
print(fatorial(5))  # 120


6. Manipulação de Arquivos
Leitura e Escrita em Arquivos

    Funções open(), read(), write(), close():
        open(): Abre um arquivo. Exemplo: f = open('arquivo.txt', 'r').
        read(): Lê o conteúdo de um arquivo. Exemplo: conteudo = f.read().
        write(): Escreve conteúdo em um arquivo. Exemplo: f.write('Olá, Mundo!').
        close(): Fecha o arquivo após a operação. Exemplo: f.close().
    Modos de abertura ('r', 'w', 'a'):
        'r': Modo leitura.
        'w': Modo escrita (sobrescreve o arquivo).
        'a': Modo de adição (adiciona ao final do arquivo).

Gerenciadores de Contexto

    Uso de with para manipulação segura de arquivos:
        O uso de with é recomendado ao trabalhar com arquivos, pois garante que o arquivo será fechado automaticamente:

with open('arquivo.txt', 'r') as f:
    conteudo = f.read()


7. Módulos e Pacotes
Importação de Módulos

    Uso de import e from...import:
        import: Importa um módulo inteiro. Exemplo: import math.
        from...import: Importa apenas partes de um módulo. Exemplo: from math import sqrt.

    Instalação de pacotes externos usando pip:
        Pacotes externos podem ser instalados usando o comando pip install pacote. Exemplo: pip install requests.

Principais Módulos Padrão

    os: Manipulação de operações do sistema operacional.
    sys: Manipulação de variáveis e funções específicas do interpretador Python.
    math: Funções matemáticas avançadas, como trigonometria, logaritmos, etc.
    datetime: Manipulação de datas e horários.

8. Programação Orientada a Objetos (POO)
Classes e Objetos

    Definição de classes com class:
        Uma classe é um modelo para criar objetos. Exemplo:

class Pessoa:
    def __init__(self, nome, idade):
        self.nome = nome
        self.idade = idade
Instanciação de objetos:

    Criar um objeto a partir de uma classe:

p1 = Pessoa('Alice', 30)


Atributos e Métodos

    Atributos de instância e métodos de classe:
        Atributos de instância: Variáveis que pertencem a uma instância específica de uma classe.
        Métodos: Funções que pertencem a uma classe.
    Conceitos de herança e polimorfismo:
        Herança: Permite que uma classe herde atributos e métodos de outra classe. Exemplo:

class Estudante(Pessoa):
    def __init__(self, nome, idade, curso):
        super().__init__(nome, idade)
        self.curso = curso
        Polimorfismo: Permite que métodos de uma classe sejam redefinidos em subclasses.

Encapsulamento

    Atributos privados e protegidos (_atributo, __atributo):
        Atributos privados: Atributos que não devem ser acessados diretamente fora da classe, denotados por __. Exemplo: __senha.
        Atributos protegidos: Atributos que devem ser tratados como "protegidos" por convenção, denotados por _. Exemplo: _nome.

9. Tratamento de Exceções
Estrutura de Exceções

    Uso de try, except, else, finally:
        try: Bloco de código que pode gerar uma exceção.
        except: Bloco de código que é executado se ocorrer uma exceção.

try:
    x = int(input("Digite um número: "))
except ValueError:
    print("Isso não é um número!")


    else: Bloco de código que é executado se não ocorrer uma exceção.
    finally: Bloco de código que é sempre executado, independentemente se ocorreu uma exceção ou não.

Criação de exceções personalizadas:

    Você pode definir suas próprias exceções criando classes que herdam de Exception:

class MeuErro(Exception):
    pass

raise MeuErro("Algo deu errado!")